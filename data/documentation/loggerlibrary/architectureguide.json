{"sections":[],"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"LoggerLibrary is designed around a protocol-first architecture that promotes loose coupling, testability, and flexibility. This guide explains the architectural patterns and best practices."}]},{"type":"heading","level":2,"text":"Protocol-First Design","anchor":"Protocol-First-Design"},{"type":"heading","level":3,"text":"Depend on Abstractions","anchor":"Depend-on-Abstractions"},{"type":"paragraph","inlineContent":[{"text":"Your modules should depend only on the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/LoggerLibrary\/documentation\/LoggerLibrary\/Logger","type":"reference"},{"text":" protocol, never on concrete implementations:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ ✅ Good: Protocol dependency","import LoggerLibrary","","struct FeatureManager {","    let logger: Logger  \/\/ Protocol type","}","","\/\/ ❌ Bad: Concrete dependency","import LoggerLibrary","","struct FeatureManager {","    let logger: PrintLogger  \/\/ Concrete type","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This keeps your modules independent and testable."}]},{"type":"heading","level":2,"text":"Domain Organization","anchor":"Domain-Organization"},{"type":"heading","level":3,"text":"Module-Level Domains","anchor":"Module-Level-Domains"},{"type":"paragraph","inlineContent":[{"text":"Each module defines its own logging domains as extensions to ","type":"text"},{"identifier":"doc:\/\/LoggerLibrary\/documentation\/LoggerLibrary\/LoggerDomain","isActive":true,"type":"reference"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ NetworkingModule\/LoggerDomain+Networking.swift","import LoggerLibrary","","extension LoggerDomain {","    static let network: LoggerDomain = \"Network\"","    static let api: LoggerDomain = \"API\"","}","","\/\/ DatabaseModule\/LoggerDomain+Database.swift","import LoggerLibrary","","extension LoggerDomain {","    static let database: LoggerDomain = \"Database\"","    static let persistence: LoggerDomain = \"Persistence\"","}"]},{"type":"heading","level":3,"text":"Benefits","anchor":"Benefits"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Natural Namespacing"}],"type":"strong"},{"type":"text","text":": Domains are scoped to their modules"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Type Safety","type":"text"}]},{"text":": Static properties prevent typos","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Discoverability","type":"text"}],"type":"strong"},{"text":": Xcode autocomplete shows available domains","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"No Conflicts"}],"type":"strong"},{"type":"text","text":": Multiple modules can safely define domains"}]}]}]},{"type":"heading","level":2,"text":"Centralized Configuration","anchor":"Centralized-Configuration"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The app layer imports all modules and sees all their domains, enabling centralized logger configuration:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ App layer","import LoggerLibrary","import NetworkingModule  \/\/ Brings .network, .api","import DatabaseModule    \/\/ Brings .database, .persistence","","let logger = DomainFilteredLogger(","    defaultLogLevel: .info,","    domainLogLevels: [","        \/\/ Control each module independently","        .network: .debug,","        .api: .verbose,","        .database: .info,","        .persistence: .warning","    ]",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This pattern allows you to:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Debug specific subsystems without noise from others","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Configure logging per environment (debug vs. release)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Change logging strategy without modifying module code"}]}]}]},{"type":"heading","level":2,"text":"Custom Logger Implementations","anchor":"Custom-Logger-Implementations"},{"type":"heading","level":3,"text":"Single-Backend Logger","anchor":"Single-Backend-Logger"},{"type":"paragraph","inlineContent":[{"text":"Create loggers for specific backends:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["import os.log","","struct OSLogger: Logger {","    private let osLog = OSLog(subsystem: \"com.app\", category: \"general\")","","    func log(","        _ level: LoggerLevel,","        _ domain: LoggerDomain,","        _ message: @autoclosure @escaping () -> String","    ) {","        let type: OSLogType = switch level {","        case .verbose, .debug: .debug","        case .info: .info","        case .warning, .error: .error","        case .disabled: .default","        }","        os_log(\"%{public}@\", log: osLog, type: type, message())","    }","}"]},{"type":"heading","level":3,"text":"Composite Logger","anchor":"Composite-Logger"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Combine multiple loggers with custom routing logic:"}]},{"type":"codeListing","syntax":"swift","code":["struct CompositeLogger: Logger {","    let console = PrintLogger(logLevel: .debug)","    let file = FileLogger()","    let remote = RemoteLogger()","","    func log(","        _ level: LoggerLevel,","        _ domain: LoggerDomain,","        _ message: @autoclosure @escaping () -> String","    ) {","        \/\/ Always log to console","        console.log(level, domain, message())","","        \/\/ Log errors to file and remote service","        if level >= .error {","            file.log(level, domain, message())","            remote.log(level, domain, message())","        }","    }","}"]},{"type":"heading","level":3,"text":"Domain-Specific Router","anchor":"Domain-Specific-Router"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Route different domains to different backends:"}]},{"type":"codeListing","syntax":"swift","code":["struct RouterLogger: Logger {","    let analyticsLogger = AnalyticsLogger()","    let consoleLogger = PrintLogger(logLevel: .debug)","","    func log(","        _ level: LoggerLevel,","        _ domain: LoggerDomain,","        _ message: @autoclosure @escaping () -> String","    ) {","        switch domain.description {","        case \"Analytics\":","            analyticsLogger.log(level, domain, message())","        default:","            consoleLogger.log(level, domain, message())","        }","    }","}"]},{"type":"heading","level":2,"text":"Testing Strategies","anchor":"Testing-Strategies"},{"type":"heading","level":3,"text":"Use NoOpLogger in Tests","anchor":"Use-NoOpLogger-in-Tests"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","identifier":"doc:\/\/LoggerLibrary\/documentation\/LoggerLibrary\/NoOpLogger","isActive":true},{"type":"text","text":" discards all messages, keeping test output clean:"}]},{"type":"codeListing","syntax":"swift","code":["func testNetworkRequest() {","    let logger = NoOpLogger()","    let manager = NetworkManager(logger: logger)","","    \/\/ Test without log noise","    manager.fetchData()","}"]},{"type":"heading","level":3,"text":"Verify Logging Behavior","anchor":"Verify-Logging-Behavior"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a test logger to verify log calls:"}]},{"type":"codeListing","syntax":"swift","code":["final class TestLogger: Logger {","    var messages: [(LoggerLevel, LoggerDomain, String)] = []","","    func log(","        _ level: LoggerLevel,","        _ domain: LoggerDomain,","        _ message: @autoclosure @escaping () -> String","    ) {","        messages.append((level, domain, message()))","    }","}","","func testLogsError() {","    let testLogger = TestLogger()","    let manager = NetworkManager(logger: testLogger)","","    manager.handleError()","","    XCTAssertEqual(testLogger.messages.count, 1)","    XCTAssertEqual(testLogger.messages[0].0, .error)","}"]},{"type":"heading","level":2,"text":"Environment Configuration","anchor":"Environment-Configuration"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Configure logging based on build configuration:"}]},{"type":"codeListing","syntax":"swift","code":["#if DEBUG","let logger = DomainFilteredLogger(","    defaultLogLevel: .debug,","    domainLogLevels: [","        .network: .verbose,","        .analytics: .disabled","    ]",")","#else","let logger = PrintLogger(logLevel: .warning)","#endif"]},{"type":"paragraph","inlineContent":[{"text":"Or use environment variables:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let logLevel: LoggerLevel = ProcessInfo.processInfo.environment[\"LOG_LEVEL\"]","    .flatMap(LoggerLevel.init(rawValue:)) ?? .info","","let logger = PrintLogger(logLevel: logLevel)"]},{"type":"heading","level":2,"text":"Best Practices","anchor":"Best-Practices"},{"type":"heading","level":3,"text":"Do","anchor":"Do"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"✅ Depend on the "},{"type":"reference","identifier":"doc:\/\/LoggerLibrary\/documentation\/LoggerLibrary\/Logger","isActive":true},{"type":"text","text":" protocol in modules"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"✅ Define domains as static properties on "},{"identifier":"doc:\/\/LoggerLibrary\/documentation\/LoggerLibrary\/LoggerDomain","type":"reference","isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"✅ Use ","type":"text"},{"isActive":true,"identifier":"doc:\/\/LoggerLibrary\/documentation\/LoggerLibrary\/DomainFilteredLogger","type":"reference"},{"text":" for flexible debugging","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"✅ Use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/LoggerLibrary\/documentation\/LoggerLibrary\/NoOpLogger"},{"type":"text","text":" in tests"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"✅ Configure logger at the app layer","type":"text"}]}]}]},{"type":"heading","level":3,"text":"Don’t","anchor":"Dont"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"❌ Import concrete logger types in modules"}]}]},{"content":[{"inlineContent":[{"text":"❌ Use string literals for domains","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"❌ Create logger instances in module code","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"❌ Log sensitive information (passwords, tokens)","type":"text"}]}]}]},{"type":"heading","level":2,"text":"Performance Considerations","anchor":"Performance-Considerations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"LoggerLibrary uses "},{"code":"@autoclosure","type":"codeVoice"},{"type":"text","text":" for message parameters, ensuring zero-cost when messages are filtered:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ This expensive operation only runs if logged","logger.debug(.network, \"Data: \\(expensiveFormatting(data))\")","","\/\/ If .network is disabled or level < .debug, the closure never executes"]},{"type":"paragraph","inlineContent":[{"text":"This makes it safe to include detailed debug logging without performance impact in production.","type":"text"}]}],"kind":"content"}],"kind":"article","abstract":[{"type":"text","text":"Understand the protocol-first architecture and how to structure logging in modular applications."}],"variants":[{"paths":["\/documentation\/loggerlibrary\/architectureguide"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/LoggerLibrary\/documentation\/LoggerLibrary"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/LoggerLibrary\/documentation\/LoggerLibrary\/ArchitectureGuide"},"metadata":{"modules":[{"name":"LoggerLibrary"}],"title":"Architecture Guide","roleHeading":"Article","role":"article","color":{"standardColorIdentifier":"blue"}},"references":{"doc://LoggerLibrary/documentation/LoggerLibrary":{"role":"collection","title":"LoggerLibrary","abstract":[{"text":"A lightweight, flexible logging framework with domain-based filtering for Swift applications.","type":"text"}],"type":"topic","identifier":"doc:\/\/LoggerLibrary\/documentation\/LoggerLibrary","kind":"symbol","url":"\/documentation\/loggerlibrary"},"doc://LoggerLibrary/documentation/LoggerLibrary/NoOpLogger":{"type":"topic","url":"\/documentation\/loggerlibrary\/nooplogger","abstract":[{"text":"A no-operation logger that discards all log messages.","type":"text"}],"title":"NoOpLogger","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"NoOpLogger"}],"role":"symbol","identifier":"doc:\/\/LoggerLibrary\/documentation\/LoggerLibrary\/NoOpLogger","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NoOpLogger"}]},"doc://LoggerLibrary/documentation/LoggerLibrary/Logger":{"kind":"symbol","type":"topic","url":"\/documentation\/loggerlibrary\/logger","identifier":"doc:\/\/LoggerLibrary\/documentation\/LoggerLibrary\/Logger","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Logger","kind":"identifier"}],"role":"symbol","abstract":[{"text":"An protocol for writing interpolated string messages to the unified logging system.","type":"text"},{"text":" ","type":"text"},{"text":"corresponding to a log level.","type":"text"}],"navigatorTitle":[{"text":"Logger","kind":"identifier"}],"title":"Logger"},"doc://LoggerLibrary/documentation/LoggerLibrary/LoggerDomain":{"navigatorTitle":[{"kind":"identifier","text":"LoggerDomain"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"LoggerDomain"}],"type":"topic","identifier":"doc:\/\/LoggerLibrary\/documentation\/LoggerLibrary\/LoggerDomain","title":"LoggerDomain","url":"\/documentation\/loggerlibrary\/loggerdomain","role":"symbol","abstract":[{"text":"The domain shared by the logs originating from the same ","type":"text"},{"identifier":"doc:\/\/LoggerLibrary\/documentation\/LoggerLibrary\/Logger","type":"reference","isActive":true},{"text":".","type":"text"}]},"doc://LoggerLibrary/documentation/LoggerLibrary/DomainFilteredLogger":{"navigatorTitle":[{"text":"DomainFilteredLogger","kind":"identifier"}],"abstract":[{"type":"text","text":"A logger that outputs messages to the console with per-domain log level configuration."}],"title":"DomainFilteredLogger","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DomainFilteredLogger","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/LoggerLibrary\/documentation\/LoggerLibrary\/DomainFilteredLogger","type":"topic","url":"\/documentation\/loggerlibrary\/domainfilteredlogger","role":"symbol"}}}